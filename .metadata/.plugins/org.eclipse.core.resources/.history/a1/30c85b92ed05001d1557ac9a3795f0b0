package com.smartshop.admin.user;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.smartshop.admin.FileUploadUtil;
import com.smartshop.common.entity.Role;
import com.smartshop.common.entity.User;

@Controller
public class UserController {
	
	@Autowired
	private UserService service;
	
	@GetMapping("/users")
	public String listAll(Model model) {
		List<User> listUsers = service.listAll();
		model.addAttribute("listUsers", listUsers);
		return "users";
	}
	@GetMapping("/users/new")
	public String newUser(Model model) {
		User user=new User();
		user.setEnabled(true);
		List<Role> listRoles = service.listRoles();
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create New User here ");
		return "user_form";
	}
	@PostMapping("/users/save")
	public String saveUser(User user,RedirectAttributes redirectAttributes,@RequestParam("image") 
	MultipartFile multipartFile) throws IOException {
		System.out.println(user);
		System.out.println(multipartFile.getOriginalFilename());
		String fileName=StringUtils.cleanPath(multipartFile.getOriginalFilename());
		String uploadDir="user-photos";
		FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
		//service.saveUser(user);
		//redirectAttributes.addFlashAttribute("mesg", "The user has been saved successfully..");
		//System.out.println(user);
		return "redirect:/users";
	}
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable(name = "id") Integer id,Model model,RedirectAttributes redirectAttributes) {
		
		try {
			User user = service.get(id);
			model.addAttribute("user", user);
			List<Role> listRoles = service.listRoles();
			model.addAttribute("pageTitle", "Edit user"+id);
			model.addAttribute("listRoles", listRoles);
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			
		}
		return "user_form";
	}
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id,Model model,RedirectAttributes redirectAttributes) {
		
		try {
			service.delete(id);
			redirectAttributes.addFlashAttribute("mesg", "The user with id "+id+" has been deleted successfully..");
		
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			
		}
		
		return "redirect:/users";
	}
	
	@GetMapping("/users/{id}/enabled/{status}")
	public String updateEnabledStatus(@PathVariable("id") Integer id,@PathVariable("status") boolean enabled,RedirectAttributes redirectAttributes) {
	
		service.updateEnabledStatus(id, enabled);
		String status=enabled?"enabled":"disabled";
		String mesg="The user ID "+id+ " has been "+ status;
		redirectAttributes.addFlashAttribute("mesg", mesg);
		return "redirect:/users";
	}
}
