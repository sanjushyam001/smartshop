package com.smartshop.admin.user;

import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.smartshop.common.entity.Role;
import com.smartshop.common.entity.User;

@Service
@Transactional
public class UserService {

	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private RoleRepository roleRepo;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	public List<User> listAll(){
		return (List<User>) userRepo.findAll();
	}
	
	public List<Role> listRoles(){
		return (List<Role>) roleRepo.findAll();
	}
	public void saveUser(User user) {
		boolean isUpdatingUser=(user.getId()!=null);
		if (isUpdatingUser) {
			User existingUser = userRepo.findById(user.getId()).get();
			if(user.getPassword().isEmpty()) {
				user.setPassword(existingUser.getPassword());
			}else {
				encodePasswordEncoder(user);
			}
		}else {
			encodePasswordEncoder(user);
		}
		
		userRepo.save(user);
	}
	private void encodePasswordEncoder(User user) {
		String encodePassword=passwordEncoder.encode(user.getPassword());
		user.setPassword(encodePassword);
	}
	public boolean isEmailUnique(Integer id, String email) {
		User userByEmail = userRepo.getUserByEmail(email);
		if(userByEmail==null) return true;
		
		
		if(id!=null) {
			if(userByEmail.getId()!=id) {
				return false;
			}
		}else {
			if(userByEmail!=null) return false;
		}
		
		return true;
	}

	public User get(Integer id) throws UserNotFoundException {
		// TODO Auto-generated method stub
		try {
		return userRepo.findById(id).get();
		}catch (NoSuchElementException e) {
			throw new UserNotFoundException("Coudn't find user"+id);
		}
		
	}
	public void delete(Integer id) throws UserNotFoundException {
	
		Long countById = userRepo.countById(id);
		if(countById==null || countById==0) {
			throw new UserNotFoundException("user is not available");
		}
		userRepo.deleteById(id);
	}
}
