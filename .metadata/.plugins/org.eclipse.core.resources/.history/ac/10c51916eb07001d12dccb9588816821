package com.smartshop.admin.user;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.smartshop.admin.FileUploadUtil;
import com.smartshop.common.entity.Role;
import com.smartshop.common.entity.User;

@Controller
public class UserController {
	
	@Autowired
	private UserService service;
	
	/*
	 * @GetMapping("/users") public String listAll(Model model) { List<User>
	 * listUsers = service.listAll(); for(User user:listUsers) {
	 * System.out.println("USER: "+user);
	 * System.out.println("full path: "+user.getPhotosImagePath()); }
	 * model.addAttribute("listUsers", listUsers); return "users"; }
	 */
	@GetMapping("/users")
	public String listFirstPage(Model model) {
		return listByPage(1, model);
	}
	@GetMapping("/users/page/{pageNumber}")
	public String listByPage(@PathVariable(name = "pageNumber") Integer pageNumber,Model model,
			@Param("sortField") String sortField,@Param("sortDirection") String sortDirection) {
		Page<User> page = service.listByPage(pageNumber,sortField,sortDirection);
		List<User> listUsers = page.getContent();
		
		/*
		 * System.out.println("PageNumber: "+pageNumber);
		 * System.out.println("Total elements: "+page.getTotalElements());
		 * System.out.println("Total pages: "+page.getTotalPages());
		 */
		long startCount=(pageNumber-1)*service.USER_PER_PAGE+1;
		long endCount=startCount+service.USER_PER_PAGE-1;
		if(endCount>page.getTotalElements()) {
			endCount=page.getTotalElements();
		}
		model.addAttribute("startCount", startCount);
		model.addAttribute("endCount", endCount);
		model.addAttribute("currentPage", pageNumber);
		model.addAttribute("totalPage", page.getTotalPages());
		model.addAttribute("totalItems", page.getTotalElements());
		model.addAttribute("listUsers",listUsers);
		//model.addAttribute("listUsers", new ArrayList<User>());
		return "users";
	}
	@GetMapping("/users/new")
	public String newUser(Model model) {
		User user=new User();
		user.setEnabled(true);
		List<Role> listRoles = service.listRoles();
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create New User here ");
		return "user_form";
	}
	@PostMapping("/users/save")
	public String saveUser(User user,RedirectAttributes redirectAttributes,@RequestParam("image") 
	MultipartFile multipartFile) throws IOException {
		
		if(!multipartFile.isEmpty()) {
			String fileName=StringUtils.cleanPath(multipartFile.getOriginalFilename());
			
			if(user.getPhotos()==null) {
				user.setPhotos(fileName);
			}
			User savedUser = service.saveUser(user);
			String uploadDir="user-photos/"+savedUser.getId();
			FileUploadUtil.cleanDir(uploadDir);
			FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
			
			
		}else {
			if(user.getPhotos().isEmpty())
				user.setPhotos(null);
			service.saveUser(user);
		}
		
		//service.saveUser(user);
		//redirectAttributes.addFlashAttribute("mesg", "The user has been saved successfully..");
		//System.out.println(user);
		return "redirect:/users";
	}
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable(name = "id") Integer id,Model model,RedirectAttributes redirectAttributes) {
		
		try {
			User user = service.get(id);
			model.addAttribute("user", user);
			List<Role> listRoles = service.listRoles();
			model.addAttribute("pageTitle", "Edit user"+id);
			model.addAttribute("listRoles", listRoles);
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			
		}
		return "user_form";
	}
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id,Model model,RedirectAttributes redirectAttributes) {
		
		try {
			service.delete(id);
			redirectAttributes.addFlashAttribute("mesg", "The user with id "+id+" has been deleted successfully..");
		
		} catch (UserNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			
		}
		
		return "redirect:/users";
	}
	
	@GetMapping("/users/{id}/enabled/{status}")
	public String updateEnabledStatus(@PathVariable("id") Integer id,@PathVariable("status") boolean enabled,RedirectAttributes redirectAttributes) {
	
		service.updateEnabledStatus(id, enabled);
		String status=enabled?"enabled":"disabled";
		String mesg="The user ID "+id+ " has been "+ status;
		redirectAttributes.addFlashAttribute("mesg", mesg);
		return "redirect:/users";
	}
}
